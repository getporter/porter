name: workshop-tf-aci
version: 0.1.0
description: "An example using Porter to build a TF bundle and use ACI"
registry: getporter

mixins:
  - arm
  - exec
  - terraform

## This section defines what credentials are used for the bundle. In this case, we are operating
## against Azure, so we need some Azure Service Principal information.
credentials:
  - name: subscription_id
    env: AZURE_SUBSCRIPTION_ID

  - name: tenant_id
    env: AZURE_TENANT_ID

  - name: client_id
    env: AZURE_CLIENT_ID

  - name: client_secret
    env: AZURE_CLIENT_SECRET

## This section defines what parameters are used by the bundle. These parameters are used by various 
## steps within the bundle
parameters:
  - name: location
    type: string
    default: "EastUS"

  - name: backend_storage_account
    type: string

  - name: backend_storage_container
    type: string

  - name: backend_storage_resource_group
    type: string

  - name: server_name
    type: string

  - name: database_name
    type: string

outputs:
  - name: IP_ADDRESS
    type: string
  - name: STORAGE_ACCOUNT_KEY
    type: string
    sensitive: true

images:
  websvc:
      description: "A simple web service"
      imageType: "docker"
      repository: "jeremyrickard/devops-days-msp"
      digest: "sha256:85b1a9b4b60a4cf73a23517dad677e64edf467107fa7d58fce9c50e6a3e4c914"

install:
  # TODO: utilize the workshop-tf bundle as a dependency?
   - arm:
      description: "Create an Azure Storage Account"
      type: arm
      template: "arm/storage.json"
      name: "{{ bundle.parameters.backend_storage_account }}"
      resourceGroup: "{{ bundle.parameters.backend_storage_resource_group }}"
      parameters:
        location: "{{ bundle.parameters.location }}"
        storageAccountName: "{{ bundle.parameters.backend_storage_account }}"
        storageContainerName: "{{ bundle.parameters.backend_storage_container }}"
      outputs:
      - name: "STORAGE_ACCOUNT_KEY"
        key: "STORAGE_ACCOUNT_KEY"
   - terraform:
      description: "Create Azure MySQL With Terraform"
      input: false
      backendConfig:
        key: "{{ bundle.name }}.tfstate"
        storage_account_name: "{{ bundle.parameters.backend_storage_account }}"
        container_name: "{{ bundle.parameters.backend_storage_container }}"
        access_key: "{{ bundle.outputs.STORAGE_ACCOUNT_KEY }}"
      vars:
        backend_storage_resource_group: "{{ bundle.parameters.backend_storage_resource_group }}"
        subscription_id: "{{bundle.credentials.subscription_id}}"
        tenant_id: "{{bundle.credentials.tenant_id}}"
        client_id: "{{bundle.credentials.client_id}}"
        client_secret: "{{bundle.credentials.client_secret}}" 
        server_name: "{{bundle.parameters.server_name}}"
        database_name: "{{bundle.parameters.database_name}}"
      outputs:
      - name: "mysql_fqdn"
   - arm:
      description: "Create an ACI Instance"
      type: arm
      template: "arm/aci.json"
      name: "{{ bundle.parameters.server_name }}-aci"
      resourceGroup: "{{ bundle.parameters.backend_storage_resource_group }}"
      parameters:
        containerName: "{{ bundle.parameters.server_name }}-aci-go"
        location: "{{ bundle.parameters.location }}"
        imageName: "{{bundle.images.websvc.repository}}@{{bundle.images.websvc.digest}}"
        mysqlFQDN: "{{bundle.outputs.mysql_fqdn}}"
        port: "8080"
      outputs:
      - name: "IP_ADDRESS"
        key: "IP_ADDRESS"

upgrade:
  - exec: 
      description: "Perform an upgrade"
      command: "bash"
      arguments:
      - "-c"
      - "echo Not implemented yet"

uninstall:
  - exec: 
      description: "Perform an uninstall"
      command: "bash"
      arguments:
      - "-c"
      - "echo Not implemented yet"