// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pkg/secrets/plugins/proto/secrets_protocol.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SecretsProtocolClient is the client API for SecretsProtocol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretsProtocolClient interface {
	Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
}

type secretsProtocolClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretsProtocolClient(cc grpc.ClientConnInterface) SecretsProtocolClient {
	return &secretsProtocolClient{cc}
}

func (c *secretsProtocolClient) Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error) {
	out := new(ResolveResponse)
	err := c.cc.Invoke(ctx, "/plugins.SecretsProtocol/Resolve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsProtocolClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/plugins.SecretsProtocol/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretsProtocolServer is the server API for SecretsProtocol service.
// All implementations must embed UnimplementedSecretsProtocolServer
// for forward compatibility
type SecretsProtocolServer interface {
	Resolve(context.Context, *ResolveRequest) (*ResolveResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	mustEmbedUnimplementedSecretsProtocolServer()
}

// UnimplementedSecretsProtocolServer must be embedded to have forward compatible implementations.
type UnimplementedSecretsProtocolServer struct {
}

func (UnimplementedSecretsProtocolServer) Resolve(context.Context, *ResolveRequest) (*ResolveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resolve not implemented")
}
func (UnimplementedSecretsProtocolServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSecretsProtocolServer) mustEmbedUnimplementedSecretsProtocolServer() {}

// UnsafeSecretsProtocolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretsProtocolServer will
// result in compilation errors.
type UnsafeSecretsProtocolServer interface {
	mustEmbedUnimplementedSecretsProtocolServer()
}

func RegisterSecretsProtocolServer(s grpc.ServiceRegistrar, srv SecretsProtocolServer) {
	s.RegisterService(&SecretsProtocol_ServiceDesc, srv)
}

func _SecretsProtocol_Resolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsProtocolServer).Resolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.SecretsProtocol/Resolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsProtocolServer).Resolve(ctx, req.(*ResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsProtocol_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsProtocolServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.SecretsProtocol/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsProtocolServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretsProtocol_ServiceDesc is the grpc.ServiceDesc for SecretsProtocol service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretsProtocol_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugins.SecretsProtocol",
	HandlerType: (*SecretsProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Resolve",
			Handler:    _SecretsProtocol_Resolve_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SecretsProtocol_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/secrets/plugins/proto/secrets_protocol.proto",
}
