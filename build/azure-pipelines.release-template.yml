variables: # these are really constants
  vmImage: "ubuntu-latest"
  GOVERSION: "1.20.7"
  # Cache go modules and the results of go build/test
  # Increment the version number prefix of the key and restoreKey to clear the cache
  GOCACHE: $(Pipeline.Workspace)/.cache/go-build/
  GOCACHE_KEY: 'v3 | go-build | "$(Agent.OS)" | go.sum'
  GOCACHE_RESTOREKEYS: |
    v3 | go-build | "$(Agent.OS)"
    v3 | go-build | "$(Agent.OS)" | go.sum
  # Use separate cache for the xbuild jobs, since they generate different outputs
  GOXCACHE_KEY: 'v3 | go-xbuild | "$(Agent.OS)" | go.sum'
  GOXCACHE_RESTOREKEYS: |
    v3 | go-xbuild | "$(Agent.OS)"
    v3 | go-xbuild | "$(Agent.OS)" | go.sum
  GOMODCACHE: /home/vsts/go/pkg/mod
  GOMODCACHE_KEY: 'v4 | go-pkg | "$(Agent.OS)" | go.sum'
  GOMODCACHE_RESTOREKEYS: |
    v4 | go-pkg | "$(Agent.OS)"
    v4 | go-pkg | "$(Agent.OS)" | go.sum

parameters:
  - name: goVersion
    type: string
    default: "1.20.7"
  - name: registry
    type: string
    default: ghcr.io/getporter/test
    values:
      - ghcr.io/getporter
      - ghcr.io/getporter/test
  - name: shouldPublish
    type: boolean
    default: false
  - name: skipTests
    type: boolean
    default: false

stages:
  - stage: Validate
    jobs:
      - job: build
        displayName: "Native Compile"
        pool:
          vmImage: ${{variables.vmImage}}
        steps:
          - task: GoTool@0
            displayName: "Set Go Version"
            inputs:
              version: ${{parameters.goVersion}}
          - task: Cache@2
            displayName: Cache Go Packages
            inputs:
              key: "$(GOMODCACHE_KEY)"
              restoreKeys: $(GOMODCACHE_RESTOREKEYS)
              path: $(GOMODCACHE)
          - task: Cache@2
            displayName: Cache Go Build
            inputs:
              key: "$(GOCACHE_KEY)"
              restoreKeys: $(GOCACHE_RESTOREKEYS)
              path: $(GOCACHE)
          - script: go run mage.go ConfigureAgent
            displayName: "Configure Agent"
          - bash: mage build
            displayName: "Native Build"
          - task: PublishPipelineArtifact@0
            displayName: "Publish Native Binaries"
            inputs:
              targetPath: $(System.DefaultWorkingDirectory)/bin
              archiveFilePatterns: "**"
              artifactName: "build-bin"
      - job: xbuild
        displayName: "Cross Compile"
        pool:
          vmImage: ${{variables.vmImage}}
        steps:
          - task: GoTool@0
            displayName: "Set Go Version"
            inputs:
              version: ${{parameters.goVersion}}
          - task: Cache@2
            displayName: Cache Go Packages
            inputs:
              key: "$(GOMODCACHE_KEY)"
              restoreKeys: $(GOMODCACHE_RESTOREKEYS)
              path: $(GOMODCACHE)
          - task: Cache@2
            displayName: Cache Go Build
            inputs:
              # Use special cache keys just for cross-compiled binaries
              key: "$(GOXCACHE_KEY)"
              restoreKeys: $(GOXCACHE_RESTOREKEYS)
              path: $(GOCACHE)
          - script: go run mage.go ConfigureAgent
            displayName: "Configure Agent"
          - bash: mage XBuildAll
            displayName: "Cross Compile"
          - task: PublishPipelineArtifact@0
            displayName: "Publish Release Binaries"
            inputs:
              targetPath: $(System.DefaultWorkingDirectory)/bin
              archiveFilePatterns: "**"
              artifactName: "xbuild-bin"
      - job: VetLint
        displayName: "Vet and Lint"
        pool:
          vmImage: ${{variables.vmImage}}
        steps:
          - task: GoTool@0
            displayName: "Set Go Version"
            inputs:
              version: ${{parameters.goVersion}}
          - task: Cache@2
            displayName: Cache Go Packages
            inputs:
              key: "$(GOMODCACHE_KEY)"
              restoreKeys: $(GOMODCACHE_RESTOREKEYS)
              path: $(GOMODCACHE)
          - task: Cache@2
            displayName: Cache Go Build
            inputs:
              key: "$(GOCACHE_KEY)"
              restoreKeys: $(GOCACHE_RESTOREKEYS)
              path: $(GOCACHE)
          - script: go run mage.go ConfigureAgent
            displayName: "Configure Agent"
          - bash: mage Vet
            displayName: "Vet"
          - bash: mage Lint
            displayName: "Lint"
      - job: unit_test
        displayName: "Unit Test"
        condition: not(${{ parameters.skipTests }})
        pool:
          vmImage: ${{variables.vmImage}}
        steps:
          - task: GoTool@0
            displayName: "Set Go Version"
            inputs:
              version: ${{parameters.goVersion}}
          - task: Cache@2
            displayName: Cache Go Packages
            inputs:
              key: "$(GOMODCACHE_KEY)"
              restoreKeys: $(GOMODCACHE_RESTOREKEYS)
              path: $(GOMODCACHE)
          - task: Cache@2
            displayName: Cache Go Build
            inputs:
              key: "$(GOCACHE_KEY)"
              restoreKeys: $(GOCACHE_RESTOREKEYS)
              path: $(GOCACHE)
          - script: go run mage.go ConfigureAgent
            displayName: "Configure Agent"
          - bash: mage TestUnit
            displayName: "Unit Test"
      - job: integration_test
        displayName: "Integration Test"
        dependsOn: build
        condition: and(succeeded('build'), not(${{ parameters.skipTests }}))
        pool:
          vmImage: ${{variables.vmImage}}
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Download Bin"
            inputs:
              source: current
              artifact: build-bin
              path: bin
          - task: GoTool@0
            displayName: "Set Go Version"
            inputs:
              version: ${{parameters.goVersion}}
          - task: Cache@2
            displayName: Cache Go Packages
            inputs:
              key: "$(GOMODCACHE_KEY)"
              restoreKeys: $(GOMODCACHE_RESTOREKEYS)
              path: $(GOMODCACHE)
          - task: Cache@2
            displayName: Cache Go Build
            inputs:
              key: "$(GOCACHE_KEY)"
              restoreKeys: $(GOCACHE_RESTOREKEYS)
              path: $(GOCACHE)
          # We log in here because TestRegistry integration test needs a valid docker session
          # This unfortunately means that this pipeline must be manually triggered for non-maintainers
          - task: Docker@2
            displayName: Docker Login
            inputs:
              command: login
              containerRegistry: ghcr.io/getporter
          - script: go run mage.go ConfigureAgent SetBinExecutable
            displayName: "Configure Agent"
          - script: mage -v TestIntegration
            displayName: "Integration Test"
      - job: smoke_test
        displayName: "Run smoke tests on"
        dependsOn: xbuild
        condition: and(succeeded(), not(${{ parameters.skipTests }}))
        strategy:
          matrix:
            # Skip windows smoke tests until we can fix the windows agent
            #windows:
            #  poolName: "windows"
            #  vmImage: ""
            #  GOMODCACHE: "C:/Users/porterci/go/pkg/mod"
            linux:
              poolName: "Azure Pipelines"
              vmImage: "ubuntu-latest"
        pool:
          name: $(poolName)
          vmImage: $(vmImage)
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Download Cross-Compiled Porter Binaries"
            inputs:
              source: current
              artifact: xbuild-bin
              path: bin
          - task: GoTool@0
            displayName: "Set Go Version"
            inputs:
              version: ${{parameters.goVersion}}
          - task: Cache@2
            displayName: Cache Go Packages
            inputs:
              key: "$(GOMODCACHE_KEY)"
              restoreKeys: $(GOMODCACHE_RESTOREKEYS)
              path: $(GOMODCACHE)
          - task: Cache@2
            displayName: Cache Go Build
            inputs:
              key: "$(GOCACHE_KEY)"
              restoreKeys: $(GOCACHE_RESTOREKEYS)
              path: $(GOCACHE)
          - script: go run mage.go ConfigureAgent UseXBuildBinaries
            displayName: "Setup Bin"
          - script: mage -v TestSmoke
            displayName: "Run Smoke Tests"

  - stage: Publish
    dependsOn: Validate
    condition: and(succeeded(), ${{ parameters.shouldPublish }})
    jobs:
      - job: publish_binaries
        displayName: "Publish Binaries"
        pool:
          vmImage: ${{variables.vmImage}}
        steps:
          - task: GoTool@0
            displayName: "Set Go Version"
            inputs:
              version: ${{parameters.goVersion}}
          - task: Cache@2
            displayName: Cache Go Packages
            inputs:
              key: "$(GOMODCACHE_KEY)"
              restoreKeys: $(GOMODCACHE_RESTOREKEYS)
              path: $(GOMODCACHE)
          - task: Cache@2
            displayName: Cache Go Build
            inputs:
              key: "$(GOCACHE_KEY)"
              restoreKeys: $(GOCACHE_RESTOREKEYS)
              path: $(GOCACHE)
          - task: DownloadPipelineArtifact@2
            displayName: "Download Cross-Compiled Porter Binaries"
            inputs:
              source: current
              artifact: xbuild-bin
              path: bin
          - script: go run mage.go ConfigureAgent UseXBuildBinaries
            displayName: "Setup Bin"
          - script: |
              mage PublishPorter PublishMixins
            env:
              GITHUB_TOKEN: $(GITHUB_TOKEN)
            displayName: "Publish Porter Binaries"

      - job: publish_docker
        displayName: "Publish Docker Images"
        pool:
          vmImage: ${{variables.vmImage}}
        steps:
          - task: GoTool@0
            displayName: "Set Go Version"
            inputs:
              version: ${{parameters.goVersion}}
          - task: Cache@2
            displayName: Cache Go Packages
            inputs:
              key: "$(GOMODCACHE_KEY)"
              restoreKeys: $(GOMODCACHE_RESTOREKEYS)
              path: $(GOMODCACHE)
          - task: Cache@2
            displayName: Cache Go Build
            inputs:
              key: "$(GOCACHE_KEY)"
              restoreKeys: $(GOCACHE_RESTOREKEYS)
              path: $(GOCACHE)
          - task: DownloadPipelineArtifact@2
            displayName: "Download Cross-Compiled Porter Binaries"
            inputs:
              source: current
              artifact: xbuild-bin
              path: bin
          - script: go run mage.go ConfigureAgent UseXBuildBinaries
            displayName: "Setup Bin"
          - task: Docker@1
            displayName: Docker Login
            inputs:
              containerRegistryType: Container Registry
              dockerRegistryEndpoint: ${{parameters.registry}} # Log in with the saved credentials for the destination registry
              command: login
          - script: PORTER_REGISTRY=${{parameters.registry}} mage PublishImages
            displayName: "Publish Docker Images to ${{parameters.registry}}"
